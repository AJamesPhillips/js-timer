// Generated by CoffeeScript 1.3.3
(function() {
  var make2Narray_v1, make2Narray_v3, makeArray_v1, makeArray_v3, outputResults, params, prepareArrays, results, results2, root, timer, useArrays, write1sTo2NArray, write1sToArray;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  makeArray_v1 = function(size) {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = 0; 0 <= size ? _i < size : _i > size; 0 <= size ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
  };

  make2Narray_v1 = function(sizeX, sizeY) {
    var array2N, i, _i, _j, _len, _results;
    array2N = (function() {
      _results = [];
      for (var _i = 0; 0 <= sizeX ? _i < sizeX : _i > sizeX; 0 <= sizeX ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = array2N.length; _j < _len; _j++) {
      i = array2N[_j];
      array2N[i] = makeArray_v1(sizeY);
    }
    return array2N;
  };

  makeArray_v3 = function(size) {
    var array;
    array = [];
    array[size - 1] = 0;
    return array;
  };

  make2Narray_v3 = function(sizeX, sizeY) {
    var array2N, v, _i, _len;
    array2N = [];
    array2N[sizeX - 1] = 0;
    for (_i = 0, _len = array2N.length; _i < _len; _i++) {
      v = array2N[_i];
      array2N.push(makeArray_v3(sizeY));
    }
    return array2N;
  };

  prepareArrays = function(type, arrayDimensions, repeats) {
    var arraySpec, i, timer, x, _i, _j, _len;
    if (arrayDimensions == null) {
      arrayDimensions = [
        {
          x: 10,
          y: 10
        }, {
          x: 1000,
          y: 1000
        }, {
          x: 100,
          y: 100
        }
      ];
    }
    if (repeats == null) {
      repeats = 10;
    }
    timer = new root.Timer;
    for (i = _i = 0, _len = arrayDimensions.length; _i < _len; i = ++_i) {
      arraySpec = arrayDimensions[i];
      for (x = _j = 0; 0 <= repeats ? _j < repeats : _j > repeats; x = 0 <= repeats ? ++_j : --_j) {
        timer.start(i, "Create " + arraySpec.x + "x" + arraySpec.y + " array using make2Narray_<b>" + type + "</b>");
        switch (type) {
          case "v1":
            make2Narray_v1(arraySpec.x, arraySpec.y);
            break;
          case "v2":
            make2Narray_v2(arraySpec.x, arraySpec.y);
            break;
          case "v3":
            make2Narray_v3(arraySpec.x, arraySpec.y);
        }
        timer.stop(i);
      }
    }
    return timer;
  };

  write1sToArray = function(array) {
    var i, y, _i, _len;
    console.log("write1sToArray of size " + array.length);
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      y = array[i];
      array[i] = 1;
    }
    return array;
  };

  write1sTo2NArray = function(array2N) {
    var i, x, _i, _len;
    console.log("write1sTo2NArray of size " + array2N.length);
    for (i = _i = 0, _len = array2N.length; _i < _len; i = ++_i) {
      x = array2N[i];
      array2N[i] = write1sToArray(x);
    }
    return array2N;
  };

  useArrays = function(type, arrayDimensions, repeats) {
    var array, arraySpec, i, timer, x, _i, _j, _len;
    if (arrayDimensions == null) {
      arrayDimensions = [
        {
          x: 10,
          y: 10
        }, {
          x: 1000,
          y: 1000
        }, {
          x: 100,
          y: 100
        }
      ];
    }
    if (repeats == null) {
      repeats = 10;
    }
    timer = new root.Timer;
    for (i = _i = 0, _len = arrayDimensions.length; _i < _len; i = ++_i) {
      arraySpec = arrayDimensions[i];
      for (x = _j = 0; 0 <= repeats ? _j < repeats : _j > repeats; x = 0 <= repeats ? ++_j : --_j) {
        array = [];
        switch (type) {
          case "v1":
            array = make2Narray_v1(arraySpec.x, arraySpec.y);
            break;
          case "v2":
            array = make2Narray_v2(arraySpec.x, arraySpec.y);
            break;
          case "v3":
            array = make2Narray_v3(arraySpec.x, arraySpec.y);
        }
        timer.start(i, "Populate " + arraySpec.x + "x" + arraySpec.y + " array created using make2Narray_<b>" + type + "</b> with 1s");
        write1sTo2NArray(array);
        timer.stop(i);
      }
    }
    return timer;
  };

  outputResults = function(resultsString) {
    return document.getElementById('results').innerHTML = resultsString;
  };

  results = "";

  timer = prepareArrays("v1");

  results += "<h3>For prepareArrays_v1 </h3>" + (timer.formatedResults()) + "<br>";

  timer = prepareArrays("v2");

  results += "<h3>For prepareArrays_v2 </h3>" + (timer.formatedResults()) + "<br>";

  timer = prepareArrays("v3");

  results += "<h3>For prepareArrays_v3 </h3>" + (timer.formatedResults()) + "<br>";

  outputResults(results);

  results2 = "";

  params = [
    [
      {
        x: 3,
        y: 3
      }, {
        x: 5,
        y: 5
      }
    ], 2
  ];

  try {
    timer = useArrays("v1", params[0], params[1]);
    results2 += "<h3>For useArrays with make2Narray_<b>v1</b> </h3>" + (timer.formatedResults()) + "<br>";
  } catch (e) {
    console.log(e);
  }

  try {
    timer = useArrays("v2", params[0], params[1]);
    results2 += "<h3>For useArrays with make2Narray_<b>v2</b> </h3>" + (timer.formatedResults()) + "<br>";
  } catch (e) {
    console.log(e);
  }

  try {
    timer = useArrays("v3", params[0], params[1]);
    results2 += "<h3>For useArrays with make2Narray_<b>v3</b> </h3>" + (timer.formatedResults()) + "<br>";
  } catch (e) {
    console.log(e);
  }

  outputResults(results2);

}).call(this);
