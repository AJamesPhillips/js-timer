// Generated by CoffeeScript 1.3.3
(function() {
  var i, make2Narray, make2Narray_v1, make2Narray_v1b, make2Narray_v3, make2Narray_v4, make2Narray_v4b, make2Narray_v5, makeArray, makeArray_v1, makeArray_v1b, makeArray_v1c, makeArray_v3, outputResults, params, prepareArrays, results, root, timer, timerTotal, type, types, useArrays, write1sTo2NArray, write1sToArray, _i, _j, _len, _len1;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  makeArray_v1 = function(size) {
    var array, _i, _results;
    array = (function() {
      _results = [];
      for (var _i = 0; 0 <= size ? _i < size : _i > size; 0 <= size ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    return array;
  };

  make2Narray_v1 = function(sizeX, sizeY) {
    var array2N, i, _i, _j, _len, _results;
    array2N = (function() {
      _results = [];
      for (var _i = 0; 0 <= sizeX ? _i < sizeX : _i > sizeX; 0 <= sizeX ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = array2N.length; _j < _len; _j++) {
      i = array2N[_j];
      array2N[i] = makeArray_v1(sizeY);
    }
    return array2N;
  };

  makeArray_v1b = function(size) {
    var array, i, x, _i, _len;
    array = [];
    array[size - 1] = 0;
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      x = array[i];
      array[i] = 0;
    }
    return array;
  };

  make2Narray_v1b = function(sizeX, sizeY) {
    var array2N, i, _i, _j, _len, _results;
    array2N = (function() {
      _results = [];
      for (var _i = 0; 0 <= sizeX ? _i < sizeX : _i > sizeX; 0 <= sizeX ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = array2N.length; _j < _len; _j++) {
      i = array2N[_j];
      array2N[i] = makeArray_v1b(sizeY);
    }
    return array2N;
  };

  makeArray_v3 = function(size) {
    var array;
    array = [];
    array[size - 1] = 0;
    return array;
  };

  make2Narray_v3 = function(sizeX, sizeY) {
    var array2N, i, x, _i, _len;
    array2N = [];
    array2N[sizeX - 1] = 0;
    for (i = _i = 0, _len = array2N.length; _i < _len; i = ++_i) {
      x = array2N[i];
      array2N[i] = makeArray_v3(sizeY);
    }
    return array2N;
  };

  make2Narray_v4 = function(sizeX, sizeY) {
    var array2N;
    array2N = [];
    while (array2N.length < sizeX) {
      array2N.push(makeArray_v3(sizeY));
    }
    return array2N;
  };

  make2Narray_v5 = function(sizeX, sizeY) {
    var array2N, i;
    array2N = [];
    i = 0;
    while (i < sizeX) {
      array2N.push(makeArray_v3(sizeY));
      i++;
    }
    return array2N;
  };

  makeArray = makeArray_v1c = function(size) {
    var array;
    array = [];
    while (array.length < size) {
      array.push(0);
    }
    return array;
  };

  make2Narray = make2Narray_v4b = function(sizeX, sizeY) {
    var array2N;
    array2N = [];
    while (array2N.length < sizeX) {
      array2N.push(makeArray_v1c(sizeY));
    }
    return array2N;
  };

  prepareArrays = function(type, arrayDimensions, repeats) {
    var arraySpec, i, timer, x, _i, _j, _len;
    if (arrayDimensions == null) {
      arrayDimensions = [
        {
          x: 10,
          y: 10
        }, {
          x: 1000,
          y: 1000
        }, {
          x: 100,
          y: 100
        }
      ];
    }
    if (repeats == null) {
      repeats = 10;
    }
    timer = new root.Timer;
    for (i = _i = 0, _len = arrayDimensions.length; _i < _len; i = ++_i) {
      arraySpec = arrayDimensions[i];
      for (x = _j = 0; 0 <= repeats ? _j < repeats : _j > repeats; x = 0 <= repeats ? ++_j : --_j) {
        timer.start(i, "Create " + arraySpec.x + "x" + arraySpec.y + " array using make2Narray_<b>" + type + "</b>");
        switch (type) {
          case "v1":
            make2Narray_v1(arraySpec.x, arraySpec.y);
            break;
          case "v1b":
            make2Narray_v1b(arraySpec.x, arraySpec.y);
            break;
          case "v2":
            make2Narray_v2(arraySpec.x, arraySpec.y);
            break;
          case "v3":
            make2Narray_v3(arraySpec.x, arraySpec.y);
            break;
          case "v4":
            make2Narray_v4(arraySpec.x, arraySpec.y);
            break;
          case "v5":
            make2Narray_v5(arraySpec.x, arraySpec.y);
            break;
          case "best":
            make2Narray(arraySpec.x, arraySpec.y);
        }
        timer.stop(i);
      }
    }
    return timer;
  };

  write1sToArray = function(array) {
    var i, y, _i, _len;
    console.log("write1sToArray of size " + array.length);
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      y = array[i];
      array[i] = 1;
    }
    return array;
  };

  write1sTo2NArray = function(array2N) {
    var i, x, _i, _len;
    console.log("write1sTo2NArray of size " + array2N.length);
    for (i = _i = 0, _len = array2N.length; _i < _len; i = ++_i) {
      x = array2N[i];
      array2N[i] = write1sToArray(x);
    }
    return array2N;
  };

  useArrays = function(type, arrayDimensions, repeats) {
    var array, arraySpec, i, timer, x, _i, _j, _len;
    if (arrayDimensions == null) {
      arrayDimensions = [
        {
          x: 10,
          y: 10
        }, {
          x: 1000,
          y: 1000
        }, {
          x: 100,
          y: 100
        }
      ];
    }
    if (repeats == null) {
      repeats = 10;
    }
    timer = new root.Timer;
    for (i = _i = 0, _len = arrayDimensions.length; _i < _len; i = ++_i) {
      arraySpec = arrayDimensions[i];
      for (x = _j = 0; 0 <= repeats ? _j < repeats : _j > repeats; x = 0 <= repeats ? ++_j : --_j) {
        array = [];
        switch (type) {
          case "v1":
            array = make2Narray_v1(arraySpec.x, arraySpec.y);
            break;
          case "v1b":
            array = make2Narray_v1b(arraySpec.x, arraySpec.y);
            break;
          case "v2":
            array = make2Narray_v2(arraySpec.x, arraySpec.y);
            break;
          case "v3":
            array = make2Narray_v3(arraySpec.x, arraySpec.y);
            break;
          case "v4":
            array = make2Narray_v4(arraySpec.x, arraySpec.y);
            break;
          case "v5":
            array = make2Narray_v5(arraySpec.x, arraySpec.y);
            break;
          case "best":
            array = make2Narray(arraySpec.x, arraySpec.y);
        }
        timer.start(i, "Populate " + arraySpec.x + "x" + arraySpec.y + " array created using make2Narray_<b>" + type + "</b> with 1s");
        write1sTo2NArray(array);
        timer.stop(i);
      }
    }
    return timer;
  };

  outputResults = function(resultsString) {
    return document.getElementById('results').innerHTML = resultsString;
  };

  /*
  Now test the array constructors
  Using "v1", "best" and "v3" (as of commit #9069634) gave the 
  following times (in milliseconds) for preparing the array and using them:
                                  v1    16                      41
                                  best  10                      41
                                  v3    11                      138
  
  Run 1000 times for an array of 1000x1000
  Google Chrome 21.0.1180.75 (Official Build 150248)
  OS  Mac OS X
  WebKit  537.1 (@124502)
  JavaScript  V8 3.11.10.17
  */


  params = [
    [
      {
        x: 3,
        y: 3
      }, {
        x: 1000,
        y: 1000
      }
    ], 1000
  ];

  results = "";

  types = ["v1", "best", "v3"];

  timerTotal = new Timer;

  timerTotal.start(null, "Total time elapsed");

  for (i = _i = 0, _len = types.length; _i < _len; i = ++_i) {
    type = types[i];
    timer = prepareArrays(type, params[0], params[1]);
    results += "<h3>For prepareArrays_" + type + " </h3>" + (timer.formatedResults()) + "<br>";
  }

  for (i = _j = 0, _len1 = types.length; _j < _len1; i = ++_j) {
    type = types[i];
    timer = useArrays(type, params[0], params[1]);
    results += "<h3>For useArrays made with make2Narray_<b>" + type + "</b> </h3>" + (timer.formatedResults()) + "<br>";
  }

  timerTotal.stop();

  results += "<br><br><h3>" + (timerTotal.formatedResults()) + "</h3>";

  outputResults(results);

}).call(this);
